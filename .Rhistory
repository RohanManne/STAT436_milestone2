ikea %>%
ggplot(aes(reorder(category, price, mean, decreasing = TRUE), price, colour = sellable_online)) +
geom_jitter(size = 0.6) +
scale_y_log10() +
labs(title = "IKEA Furniture Category vs Price", x = "Furniture Category")
ikea %>%
ggplot(aes(reorder(category, price, mean, decreasing = TRUE), price, colour = sellable_online)) +
geom_jitter(size = 0.6) +
scale_y_log10() +
labs(title = "IKEA Furniture Category vs Price", x = "Furniture Category") +
coord_flip()
ikea %>%
ggplot(aes(reorder(category, price, mean), price, colour = sellable_online)) +
geom_jitter(size = 0.6) +
scale_y_log10() +
labs(title = "IKEA Furniture Category vs Price", x = "Furniture Category") +
coord_flip()
ikea %>%
ggplot(aes(reorder(category, price, mean), price, colour = sellable_online)) +
geom_jitter(size = 0.6) +
scale_y_log10() +
labs(title = "IKEA Furniture Category vs Price", x = "Furniture Category", colour = "Sellable Online") +
coord_flip()
ikea %>%
ggplot(aes(reorder(category, price, mean), price, colour = sellable_online)) +
geom_jitter(size = 0.6) +
scale_y_log10() +
labs(title = "IKEA Furniture Category vs Price", x = "Furniture Category", colour = "Sellable Online", y = "Price ($)") +
coord_flip()
ikea %>%
ggplot(aes(reorder(category, price, mean), price, colour = sellable_online)) +
geom_jitter(size = 1.6) +
scale_y_log10() +
labs(title = "IKEA Furniture Category vs Price", x = "Furniture Category", colour = "Sellable Online", y = "Price ($)") +
coord_flip()
ikea %>%
ggplot(aes(reorder(category, price, mean), price, colour = sellable_online)) +
geom_jitter(size = 0.8) +
scale_y_log10() +
labs(title = "IKEA Furniture Category vs Price", x = "Furniture Category", colour = "Sellable Online", y = "Price ($)") +
coord_flip()
ikea %>%
ggplot(aes(reorder(category, price, mean), price, colour = sellable_online)) +
geom_jitter(size = 0.8) +
scale_y_log10() +
labs(title = "IKEA Furniture Category vs Price", x = "Furniture Category", colour = "Sellable Online", y = "Price ($)") +
geom_text(data = subset(ikea, sellable_online = FALSE)) +
coord_flip()
#load data
ikea <- read_csv("https://uwmadison.box.com/shared/static/iat31h1wjg7abhd2889cput7k264bdzd.csv")
ikea
ikea %>%
ggplot(aes(reorder(category, price, mean), price, colour = sellable_online)) +
geom_jitter(size = 0.8) +
scale_y_log10() +
labs(title = "IKEA Furniture Category vs Price", x = "Furniture Category", colour = "Sellable Online", y = "Price ($)") +
geom_text(data = subset(ikea, sellable_online = FALSE), aes(label = name)) +
coord_flip()
ikea %>%
ggplot(aes(reorder(category, price, mean), price, colour = sellable_online)) +
geom_jitter(size = 0.8) +
scale_y_log10() +
labs(title = "IKEA Furniture Category vs Price", x = "Furniture Category", colour = "Sellable Online", y = "Price ($)") +
geom_text(data = subset(ikea, sellable_online == FALSE), aes(label = name)) +
coord_flip()
ikea %>%
ggplot(aes(reorder(category, price, mean), price, colour = sellable_online)) +
geom_jitter(size = 0.8) +
scale_y_log10() +
labs(title = "IKEA Furniture Category vs Price", x = "Furniture Category", colour = "Sellable Online", y = "Price ($)") +
geom_text(data = subset(ikea, sellable_online == FALSE), aes(reorder(category, price, mean), price, label = name)) +
coord_flip()
ikea %>% select(name, category) %>% filter(sellable_online == FALSE)
ikea %>% select(name, category) %>% filter(sellable_online = FALSE)
?filter
ikea  %>% filter(sellable_online = FALSE) %>% select(name, category)
ikea
ikea(sellable_online = FALSE)
ikea[sellable_online = FALSE]
ikea[sellable_online == FALSE]
filter(ikea, sellable_online == FALSE)
filter(ikea, sellable_online == FALSE)[names]
filter(ikea, sellable_online == FALSE)[name]
filter(ikea, sellable_online == FALSE)$name
ikea %>%
ggplot(aes(reorder(category, price, mean), price, colour = sellable_online)) +
geom_jitter(size = 0.8) +
scale_color_manual(values=c("#0317FC", "#FFFF47")) +
scale_y_log10() +
labs(title = "IKEA Furniture Category vs Price", x = "Furniture Category", colour = "Sellable Online", y = "Price ($)") +
geom_text(data = subset(ikea, sellable_online == FALSE), aes(label = name)) +
coord_flip()
ikea %>%
ggplot(aes(reorder(category, price, mean), price, colour = sellable_online)) +
geom_jitter(size = 0.8) +
scale_color_manual(values=c("#FFFF47", "#0317FC")) +
scale_y_log10() +
labs(title = "IKEA Furniture Category vs Price", x = "Furniture Category", colour = "Sellable Online", y = "Price ($)") +
geom_text(data = subset(ikea, sellable_online == FALSE), aes(label = name)) +
coord_flip()
ikea %>%
ggplot(aes(reorder(category, price, mean), price, colour = sellable_online)) +
geom_jitter(size = 0.8) +
scale_color_manual(values=c("#FF4769", "#0317FC")) +
scale_y_log10() +
labs(title = "IKEA Furniture Category vs Price", x = "Furniture Category", colour = "Sellable Online", y = "Price ($)") +
geom_text(data = subset(ikea, sellable_online == FALSE), aes(label = name)) +
coord_flip()
ikea %>%
ggplot(aes(reorder(category, price, mean), price, colour = sellable_online)) +
geom_jitter(size = 0.8) +
scale_color_manual(values=c("#AD0524", "#0317FC")) +
scale_y_log10() +
labs(title = "IKEA Furniture Category vs Price", x = "Furniture Category", colour = "Sellable Online", y = "Price ($)") +
geom_text(data = subset(ikea, sellable_online == FALSE), aes(label = name)) +
coord_flip()
ikea %>%
ggplot(aes(reorder(category, price, mean), price, colour = sellable_online)) +
geom_jitter(size = 0.8) +
scale_color_manual(values=c("#AD0524", "#0317FC")) +
theme(
panel.background = element_rect(fill = "#fcee1e",
colour = "#fcee1e",
size = 0.5, linetype = "solid") +
scale_y_log10() +
labs(title = "IKEA Furniture Category vs Price", x = "Furniture Category", colour = "Sellable Online", y = "Price ($)") +
geom_text(data = subset(ikea, sellable_online == FALSE), aes(label = name)) +
coord_flip()
ikea %>%
ikea %>%
ggplot(aes(reorder(category, price, mean), price, colour = sellable_online)) +
geom_jitter(size = 0.8) +
scale_color_manual(values=c("#AD0524", "#0317FC")) +
theme(panel.background = element_rect(fill = "#fcee1e",
colour = "#fcee1e",
size = 0.5, linetype = "solid")) +
scale_y_log10() +
labs(title = "IKEA Furniture Category vs Price", x = "Furniture Category", colour = "Sellable Online", y = "Price ($)") +
geom_text(data = subset(ikea, sellable_online == FALSE), aes(label = name)) +
coord_flip()
knitr::opts_chunk$set(warnings = FALSE, message = FALSE)
library(tidyverse)
ikea <- read_csv("https://uwmadison.box.com/shared/static/iat31h1wjg7abhd2889cput7k264bdzd.csv") |>filter(category %in% c("Tables", "Bookcases", "Beds", "Cabinets", "Sofas", "Wardrobes"))
ggplot(ikea) +
geom_histogram(aes(log(price)))
ikea <- read_csv("https://uwmadison.box.com/shared/static/iat31h1wjg7abhd2889cput7k264bdzd.csv") |>filter(category %in% c("Tables", "Bookcases", "Beds", "Cabinets", "Sofas", "Wardrobes"))
ggplot(ikea) +
geom_histogram(aes(log(price))) +
facet_grid(category ~ .)
ikea <- read_csv("https://uwmadison.box.com/shared/static/iat31h1wjg7abhd2889cput7k264bdzd.csv") |>filter(category %in% c("Tables", "Bookcases", "Beds", "Cabinets", "Sofas", "Wardrobes"))
ggplot(ikea) +
geom_histogram(aes(log(price))) +
facet_wrap(~ category)
knitr::opts_chunk$set(warnings = FALSE, message = FALSE)
library(tidyverse)
ncaa <- read_csv("https://github.com/krisrs1128/stat992_f23/raw/main/exercises/ps1/ncaa_filtered.csv")
tail(ncaa, 200)
ncaa <- ncaa |>
group_by(school) |>
mutate(
totals = cumsum(points),
expected = 35 * (year - 1981)
)
theme_set(theme_classic())
ggplot(ncaa) +
geom_step(aes(year, totals)) +
geom_step(aes(year, expected)) +
geom_rect(aes(xmin = year, xmax = year + 1, ymin = expected, ymax = totals, fill = totals - expected)) +
facet_wrap(~ reorder(school, -points)) +
scale_fill_gradient2() +
scale_x_continuous(breaks = c(1985, 1995, 2005, 2015)) +
theme(
axis.text = element_text(size = 14),
strip.text = element_text(size = 14),
axis.title = element_text(size = 16)
)
ikea <- read_csv("https://uwmadison.box.com/shared/static/iat31h1wjg7abhd2889cput7k264bdzd.csv") |>filter(category %in% c("Tables", "Bookcases", "Beds", "Cabinets", "Sofas", "Wardrobes"))
ggplot(ikea) +
geom_histogram(aes(log(price))) +
facet_wrap(~ category)
ikea <- read_csv("https://uwmadison.box.com/shared/static/iat31h1wjg7abhd2889cput7k264bdzd.csv") |>filter(category %in% c("Tables", "Bookcases", "Beds", "Cabinets", "Sofas", "Wardrobes"))
ggplot(ikea) +
geom_histogram(aes(log(price))) +
acet_wrap(~ category, scales = "free_y")
ikea <- read_csv("https://uwmadison.box.com/shared/static/iat31h1wjg7abhd2889cput7k264bdzd.csv") |>filter(category %in% c("Tables", "Bookcases", "Beds", "Cabinets", "Sofas", "Wardrobes"))
ggplot(ikea) +
geom_histogram(aes(log(price))) +
facet_wrap(~ category, scales = "free_y")
ikea <- read_csv("https://uwmadison.box.com/shared/static/iat31h1wjg7abhd2889cput7k264bdzd.csv") |>filter(category %in% c("Tables", "Bookcases", "Beds", "Cabinets", "Sofas", "Wardrobes"))
ggplot(ikea) +
geom_histogram(aes(log(price))) +
facet_wrap(~ category, axes = "separate")
ikea <- read_csv("https://uwmadison.box.com/shared/static/iat31h1wjg7abhd2889cput7k264bdzd.csv") |>filter(category %in% c("Tables", "Bookcases", "Beds", "Cabinets", "Sofas", "Wardrobes"))
ggplot(ikea) +
geom_histogram(aes(log(price))) +
facet_wrap(~ reorder(category, price))
ikea <- read_csv("https://uwmadison.box.com/shared/static/iat31h1wjg7abhd2889cput7k264bdzd.csv") |>filter(category %in% c("Tables", "Bookcases", "Beds", "Cabinets", "Sofas", "Wardrobes"))
ggplot(ikea) +
geom_histogram(aes(log(price))) +
facet_grid(category ~ .)
knitr::opts_chunk$set(warnings = FALSE, message = FALSE)
library(tidyverse)
library(shiny)
install.packages(shiny)
updateR()
knitr::opts_chunk$set(warnings = FALSE, message = FALSE)
library(tidyverse)
library(tsibble)
library(feasts)
theme_set(theme_bw())
carbon <- read_csv("https://go.wisc.edu/7qx7u1")
head(carbon)
carbon <- carbon |>
pivot_longer(-c("country", "Country Code"), names_to = "year")
?as_tibble
ggplot(carbon_ts) +
geom_line(aes(year, value, group = country))
carbon_ts <- carbon |>
filter(country != "Switzerland") |>
mutate(year = as.integer(year)) |>
as_tsibble(index = year, key = country)
ggplot(carbon_ts) +
geom_line(aes(year, value, group = country))
ggplot(carbon_ts) +
geom_tile(aes(year, reorder(country, value), fill = log(1 + value), col = log(1 + value))) +
scale_fill_distiller(direction = 1) +
scale_color_distiller(direction = 1) +
theme(axis.text.y = element_text(size = 6)) +
scale_x_continuous(expand = c(0, 0))
ggplot(carbon_ts) +
geom_line(aes(year, value, group = country))
carbon_ts |>
filter(country == "United States") |>
gg_lag()
?gg_lag
library(slider)
smoothed_carbon <- carbon_ts |>
group_by(country) |>
mutate(smoothed = slide_dbl(value, mean, .before = 5, .after = 5))
ggplot(smoothed_carbon) +
geom_line(aes(year, smoothed, group = country))
knitr::opts_chunk$set(warnings = FALSE, message = FALSE)
library(sf)
library(tmap)
library(tidyverse)
library(ceramic)
theme_set(theme_bw())
mtcars
mtcars %>% mutate(kw = hp * 0.7457) %>% filter(wt <= 3.250
)
mtcars %>% mutate(kw = hp * 0.7457) %>% filter(wt <= 3.250) %>% geom_point(aes(x = wt, y = kw))
lakes <- read_sf("https://raw.githubusercontent.com/krisrs1128/stat436_s23/main/data/GL_3basins_2015.topojson") |>
mutate(log_area = log(Area))
cols <- c("#023859", "#99ADBF")
top_lakes <- lakes |>
group_by(Sub_Basin) |>
slice_max(Area)
tm_shape(top_lakes) +
tm_polygons() +
tm_facets("Sub_Basin") +
tm_scale_bar()
knitr::opts_chunk$set(warnings = FALSE, message = FALSE)
library(tidyverse)
library(shiny)
library(sf)
library(DT)
library(leaflet)
theme_set(theme_bw())
lakes <- read_sf("https://raw.githubusercontent.com/krisrs1128/stat436_s23/main/data/GL_3basins_2015.topojson") |>
mutate(log_area = log(Area))
cols <- c("#023859", "#99ADBF")
ui <- fluidPage(
fluidRow(
column(6, plotOutput("histogram", brush = brushOpts("plot_brush", direction = "x"))),
column(6, leafletOutput("map"))
),
DTOutput("table")
)
server <- function(input, output) {
# setup the brush interaction
selected <- reactiveVal(rep(TRUE, nrow(lakes)))
observeEvent(
input$plot_brush, {
clicked(NULL)
selected(brushedPoints(lakes, input$plot_brush, allRows = TRUE)$selected_)
}
)
# draw the histogram
output$histogram <- renderPlot({
ggplot(lakes, aes(log_area)) +
geom_histogram(fill = cols[2]) +
geom_histogram(data = filter(lakes, selected()), fill = cols[1]) +
scale_y_continuous(expand = c(0, 0, 0, 0.9))
})
# filter the table based on interactions
output$table <- renderDT({
current_lakes <- lakes |>
filter(selected())
clicked_lake <- clicked()$id
if (!is.null(clicked_lake)) {
current_lakes <- current_lakes |>
filter(GL_ID == clicked_lake)
}
current_lakes |>
arrange(-Area)
})
# initial map render
output$map <- renderLeaflet({
lakes |>
leaflet() |>
addProviderTiles("Esri.WorldImagery") |>
addPolygons(color = cols[1])
})
# rerender the polygons without resetting the whole map
observe({
leafletProxy("map", data = filter(lakes, selected())) |>
clearShapes() |>
addPolygons(color = cols[1], label = ~ GL_ID, layerId = ~ GL_ID)
})
# check whether we've clicked on any polygon
clicked <- reactiveVal()
observeEvent(input$map_shape_click, {
clicked(input$map_shape_click)
})
}
shinyApp(ui, server)
ui <- fluidPage(
fluidRow(
column(6, plotOutput("histogram", brush = brushOpts("plot_brush", direction = "x"))),
column(6, leafletOutput("map"))
),
DTOutput("table")
)
server <- function(input, output) {
# setup the brush interaction
selected <- reactiveVal(rep(TRUE, nrow(lakes)))
observeEvent(
input$plot_brush, {
clicked(NULL)
selected(brushedPoints(lakes, input$plot_brush, allRows = TRUE)$selected_)
}
)
# draw the histogram
output$histogram <- renderPlot({
ggplot(lakes, aes(log_area)) +
geom_histogram(fill = cols[2]) +
geom_histogram(data = filter(lakes, selected()), fill = cols[1]) +
scale_y_continuous(expand = c(0, 0, 0, 0.9))
})
# filter the table based on interactions
output$table <- renderDT({
current_lakes <- lakes |>
filter(selected())
clicked_lake <- clicked()$id
if (!is.null(clicked_lake)) {
current_lakes <- current_lakes |>
filter(GL_ID == clicked_lake)
}
current_lakes |>
arrange(-Area)
})
# initial map render
output$map <- renderLeaflet({
lakes |>
leaflet() |>
addProviderTiles("Esri.WorldImagery") |>
addPolygons(color = cols[1])
})
# rerender the polygons without resetting the whole map
observe({
leafletProxy("map", data = filter(lakes, selected())) |>
clearShapes() |>
addPolygons(color = cols[1], label = ~ GL_ID, layerId = ~ GL_ID)
})
# check whether we've clicked on any polygon
clicked <- reactiveVal()
observeEvent(input$map_shape_click, {
clicked(input$map_shape_click)
})
}
shinyApp(ui, server)
# Chunk 1: setup
knitr::opts_chunk$set(warnings = FALSE, message = FALSE)
library(tidyverse)
library(shiny)
library(DT)
library(rsconnect)
# Chunk 2
df = read_csv("https://uwmadison.box.com/shared/static/udwvefuh9y7zchq7tmx7pzl60a2mqrgc.csv")
head(df)
# Chunk 3
ui <- fluidPage(
titlePanel("Health Insurance Bills"),
sidebarPanel(
sliderInput("bmi", "Body Mass Index (BMI)",
c(25, 45), min = 15, max = 55, step = 1),
selectInput("region", "Region of the US",
choices = c("northwest", "northeast", "southwest",
"southeast"), selected = "northwest"),
width = 4),
sidebarPanel(
p("Columns summary"),
helpText("age: Age of primary beneficiary"),
helpText("sex: Sex of beneficiary (male/female)"),
helpText("bmi: Body mass index (ideal range 18.5 to 24.9)"),
helpText("children: Number of children covered by health insurance / Number of dependents"),
helpText("smoker: Smoking status of beneficiary (y/n)"),
helpText("region: The beneficiary's residential area in the US, northeast, southeast, southwest, northwest"),
helpText("charges: Individual medical costs billed by health insurance ($)"), width = 7),
br(),
DTOutput("table") #keep table below sliders
)
server <- function(input, output) {
selected <- reactiveVal(rep(TRUE, nrow(df)))
output$table <- renderDataTable({
current_items <- df |>
filter(selected()) %>%
filter(bmi >= input$bmi[1] & bmi <= input$bmi[2]) %>%
filter(region == input$region) %>%
arrange(-charges)
})
}
shinyApp(ui, server)
library(tidyverse)
library(nycflights13)
flights2 <- flights |> select(carrier, air_time, distance) %>%
mutate(speed = distance / air_time)
flights2
knitr::opts_chunk$set(warnings = FALSE, message = FALSE)
library(tidyverse)
install.packages("cli")
install.packages("cli")
library(tidyverse)
install.packages("cli")
install.packages("tidyverse")
setwd("~/College/College 24 fall/stat 436/Demos")
knitr::opts_chunk$set(warnings = FALSE, message = FALSE)
library(tidyverse)
update.packages(ask = FALSE, checkBuilt = TRUE)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
install.packages("cli")
install.packages("cli")
version
knitr::opts_chunk$set(warnings = FALSE, message = FALSE)
library(tidyverse)
library(tidymodels)
th <- theme_minimal() +
theme(
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "#f7f7f7"),
panel.border = element_rect(fill = NA, color = "#0c0c0c"),
axis.text = element_text(size = 14),
axis.title = element_text(size = 16),
strip.text = element_text(size = 16),
legend.position = "bottom"
)
theme_set(th)
version
setwd("~/College/College 24 fall/stat 436/Demos")
setwd("~/College/College 24 fall/stat 436/STAT436_milestone2")
?geom_ribbon
library(shiny)
library(tidyverse)
library(plotly)
library(countrycode)
energy <- read.csv("owid-energy.csv")
renewable_share <- read.csv("renewable-share-energy.csv")
# data for choropleth map
renewable_share <- renewable_share %>%
rename(Country = Entity, Code = Code, Year = Year,
Renewable_Percentage = Renewables) %>%
mutate(continent = countrycode(Country, origin = "country.name", destination = "continent"))
energy_long <- energy %>%
pivot_longer(
c("biofuel_electricity", "coal_electricity", "fossil_electricity", "gas_electricity",
"hydro_electricity", "low_carbon_electricity", "nuclear_electricity", "oil_electricity",
"other_renewable_electricity", "renewables_electricity", "solar_electricity", "wind_electricity"),
names_to = "energy_type",
values_to = "energy_values"
) %>%
mutate(
continent = countrycode(country, origin = "country.name", destination = "continent"),
energy_type = str_to_title(str_replace_all(energy_type, "_", " "))
) %>%
filter(continent != "NA" & continent != "Antarctica" & energy_values != 0)
?geom_ribbon
runApp('Milestone2.R')
runApp('Milestone2.R')
runApp('Milestone2.R')
runApp('Milestone2.R')
energy_long %>% group_by(continent)
energy_long %>% group_by(continent, year) %>% summarize()
energy_long %>% group_by(continent, year) %>% summarize(rc = sum(renewables_consumption))
runApp('Milestone2.R')
runApp('Milestone2.R')
runApp('Milestone2.R')
runApp('Milestone2.R')
runApp('Milestone2.R')
runApp('Milestone2.R')
runApp('Milestone2.R')
runApp('Milestone2.R')
runApp('Milestone2.R')
energy_long %>%
group_by(continent, year) %>%
summarize(rc = sum(renewables_consumption, na.rm = TRUE), .groups = "drop") %>%
arrange(desc(rc)) %>%
head()  # Inspect the top rows to ensure ordering
runApp('Milestone2.R')
runApp('Milestone2.R')
runApp('Milestone2.R')
